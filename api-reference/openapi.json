{
  "openapi": "3.1.0",
  "info": {
    "title": "HolySuck API",
    "description": "Comprehensive API for modern applications - user management, services, analytics, and more",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.holysuck.com/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Authenticate user",
        "description": "Authenticate a user with email and password",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current user",
        "description": "Get the profile of the currently authenticated user",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List users",
        "description": "Get a paginated list of users",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Create a new user account",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get user",
        "description": "Get a specific user by ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update an existing user",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete a user account",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "summary": "List services",
        "description": "Get a paginated list of services",
        "tags": ["Services"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create service",
        "description": "Create a new service",
        "tags": ["Services"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["id", "email", "name", "status", "role", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "description": "User's display name"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar image URL"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "User account status"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin", "moderator"],
            "description": "User role"
          },
          "metadata": {
            "type": "object",
            "description": "Custom user metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "User creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "User last update timestamp"
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time",
            "description": "User last login timestamp"
          }
        }
      },
      "Service": {
        "type": "object",
        "required": ["id", "name", "type", "status", "owner", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique service identifier"
          },
          "name": {
            "type": "string",
            "description": "Service name"
          },
          "description": {
            "type": "string",
            "description": "Service description"
          },
          "type": {
            "type": "string",
            "enum": ["web_application", "mobile_app", "api_service"],
            "description": "Service type"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "Service status"
          },
          "configuration": {
            "type": "object",
            "description": "Service configuration"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Service creation timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Service last update timestamp"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "token_type": {
            "type": "string",
            "enum": ["Bearer"],
            "description": "Token type"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": ["email", "name", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "name": {
            "type": "string",
            "description": "User's display name"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User's password"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin", "moderator"],
            "default": "user",
            "description": "User role"
          },
          "metadata": {
            "type": "object",
            "description": "Custom user metadata"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's display name"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar image URL"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "User account status"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin", "moderator"],
            "description": "User role"
          },
          "metadata": {
            "type": "object",
            "description": "Custom user metadata"
          }
        }
      },
      "CreateServiceRequest": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name"
          },
          "description": {
            "type": "string",
            "description": "Service description"
          },
          "type": {
            "type": "string",
            "enum": ["web_application", "mobile_app", "api_service"],
            "description": "Service type"
          },
          "configuration": {
            "type": "object",
            "description": "Service configuration"
          }
        }
      },
      "UserList": {
        "type": "object",
        "required": ["data", "pagination"],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ServiceList": {
        "type": "object",
        "required": ["data", "pagination"],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "required": ["page", "per_page", "total", "total_pages", "has_more"],
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more pages"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "description": "Detailed error information"
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "description": "Link to documentation for this error"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}